/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class LinkedAccountsListSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({
        data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
    })
    tokenAuth: string;
}

/**
 * Options: ('hris', 'ats', 'accounting', 'ticketing', 'crm', 'mktg', 'filestorage')
 *
 * @remarks
 *
 * * `hris` - hris
 * * `ats` - ats
 * * `accounting` - accounting
 * * `ticketing` - ticketing
 * * `crm` - crm
 * * `mktg` - mktg
 * * `filestorage` - filestorage
 */
export enum LinkedAccountsListCategory {
    Accounting = "accounting",
    Ats = "ats",
    Crm = "crm",
    Filestorage = "filestorage",
    Hris = "hris",
    Mktg = "mktg",
    Ticketing = "ticketing",
}

export class LinkedAccountsListRequest extends SpeakeasyBase {
    /**
     * Options: ('hris', 'ats', 'accounting', 'ticketing', 'crm', 'mktg', 'filestorage')
     *
     * @remarks
     *
     * * `hris` - hris
     * * `ats` - ats
     * * `accounting` - accounting
     * * `ticketing` - ticketing
     * * `crm` - crm
     * * `mktg` - mktg
     * * `filestorage` - filestorage
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=category" })
    category?: LinkedAccountsListCategory;

    /**
     * The pagination cursor value.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cursor" })
    cursor?: string;

    /**
     * If provided, will only return linked accounts associated with the given email address.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=end_user_email_address" })
    endUserEmailAddress?: string;

    /**
     * If provided, will only return linked accounts associated with the given organization name.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=end_user_organization_name",
    })
    endUserOrganizationName?: string;

    /**
     * If provided, will only return linked accounts associated with the given origin ID.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=end_user_origin_id" })
    endUserOriginId?: string;

    /**
     * Comma-separated list of EndUser origin IDs, making it possible to specify multiple EndUsers at once.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=end_user_origin_ids" })
    endUserOriginIds?: string;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=id" })
    id?: string;

    /**
     * Comma-separated list of LinkedAccount IDs, making it possible to specify multiple LinkedAccounts at once.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ids" })
    ids?: string;

    /**
     * If `true`, will include complete production duplicates of the account specified by the `id` query parameter in the response. `id` must be for a complete production linked account.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=include_duplicates" })
    includeDuplicates?: boolean;

    /**
     * If provided, will only return linked accounts associated with the given integration name.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=integration_name" })
    integrationName?: string;

    /**
     * If included, will only include test linked accounts. If not included, will only include non-test linked accounts.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=is_test_account" })
    isTestAccount?: string;

    /**
     * Number of results to return per page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page_size" })
    pageSize?: number;

    /**
     * Filter by status. Options: `COMPLETE`, `INCOMPLETE`, `RELINK_NEEDED`
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=status" })
    status?: string;
}

export class LinkedAccountsListResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    paginatedAccountDetailsAndActionsList?: shared.PaginatedAccountDetailsAndActionsList;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
