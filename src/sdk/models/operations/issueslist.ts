/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

/**
 * Status of the issue. Options: ('ONGOING', 'RESOLVED')
 *
 * @remarks
 *
 * * `ONGOING` - ONGOING
 * * `RESOLVED` - RESOLVED
 */
export enum Status {
    Ongoing = "ONGOING",
    Resolved = "RESOLVED",
}

export class IssuesListRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=account_token" })
    accountToken?: string;

    /**
     * The pagination cursor value.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cursor" })
    cursor?: string;

    /**
     * If included, will only include issues whose most recent action occurred before this time
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=end_date" })
    endDate?: string;

    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=end_user_organization_name",
    })
    endUserOrganizationName?: string;

    /**
     * If provided, will only return issues whose first incident time was after this datetime.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=first_incident_time_after",
    })
    firstIncidentTimeAfter?: Date;

    /**
     * If provided, will only return issues whose first incident time was before this datetime.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=first_incident_time_before",
    })
    firstIncidentTimeBefore?: Date;

    /**
     * If True, will include muted issues
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=include_muted" })
    includeMuted?: string;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=integration_name" })
    integrationName?: string;

    /**
     * If provided, will only return issues whose last incident time was after this datetime.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=last_incident_time_after",
    })
    lastIncidentTimeAfter?: Date;

    /**
     * If provided, will only return issues whose last incident time was before this datetime.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=last_incident_time_before",
    })
    lastIncidentTimeBefore?: Date;

    /**
     * Number of results to return per page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page_size" })
    pageSize?: number;

    /**
     * If included, will only include issues whose most recent action occurred after this time
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=start_date" })
    startDate?: string;

    /**
     * Status of the issue. Options: ('ONGOING', 'RESOLVED')
     *
     * @remarks
     *
     * * `ONGOING` - ONGOING
     * * `RESOLVED` - RESOLVED
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=status" })
    status?: Status;
}

export class IssuesListResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    paginatedIssueList?: shared.PaginatedIssueList;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
