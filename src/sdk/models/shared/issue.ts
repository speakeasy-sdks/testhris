/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * * `ONGOING` - ONGOING
 *
 * @remarks
 * * `RESOLVED` - RESOLVED
 */
export enum IssueStatus {
    Ongoing = "ONGOING",
    Resolved = "RESOLVED",
}

export class Issue extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "end_user" })
    endUser?: Record<string, any>;

    @SpeakeasyMetadata()
    @Expose({ name: "error_description" })
    errorDescription: string;

    @SpeakeasyMetadata()
    @Expose({ name: "error_details" })
    errorDetails?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "first_incident_time" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    firstIncidentTime?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "is_muted" })
    isMuted?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "last_incident_time" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    lastIncidentTime?: Date;

    /**
     * Status of the issue. Options: ('ONGOING', 'RESOLVED')
     *
     * @remarks
     *
     * * `ONGOING` - ONGOING
     * * `RESOLVED` - RESOLVED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: IssueStatus;
}
